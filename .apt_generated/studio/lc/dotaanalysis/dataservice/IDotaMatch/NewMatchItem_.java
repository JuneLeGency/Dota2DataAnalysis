//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package studio.lc.dotaanalysis.dataservice.IDotaMatch;

import java.sql.SQLException;
import android.app.Activity;
import android.content.Context;
import android.os.Handler;
import android.util.Log;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.TextView;
import com.googlecode.androidannotations.api.BackgroundExecutor;
import com.j256.ormlite.android.apptools.OpenHelperManager;
import com.j256.ormlite.dao.DaoManager;
import com.j256.ormlite.support.ConnectionSource;
import studio.lc.dotaanalysis.R.id;
import studio.lc.dotaanalysis.R.layout;
import studio.lc.dotaanalysis.dataservice.DatabaseHelper;
import studio.lc.dotaanalysis.dataservice.IDota2.dataBean.Hero;
import studio.lc.dotaanalysis.dataservice.IDotaMatch.dataBean.Match;


/**
 * We use @SuppressWarning here because our java code
 * generator doesn't know that there is no need
 * to import OnXXXListeners from View as we already
 * are in a View.
 * 
 */
@SuppressWarnings("unused")
public final class NewMatchItem_
    extends NewMatchItem
{

    private Context context_;
    private boolean mAlreadyInflated_ = false;
    private ConnectionSource connectionSource_;
    private Handler handler_ = new Handler();

    public NewMatchItem_(Context context) {
        super(context);
        init_();
    }

    private void init_() {
        context_ = getContext();
        if (context_ instanceof Activity) {
            Activity activity = ((Activity) context_);
        }
        connectionSource_ = OpenHelperManager.getHelper(context_, DatabaseHelper.class).getConnectionSource();
        try {
            herodao = DaoManager.createDao(connectionSource_, Hero.class);
        } catch (SQLException e) {
            Log.e("NewMatchItem_", "Could not create DAO", e);
        }
        finder = MatchFinderImpl_.getInstance_(context_);
        playerAdapter = PlayerAdapter_.getInstance_(context_);
    }

    private void afterSetContentView_() {
        position = ((TextView) findViewById(id.position));
        heros = ((GridView) findViewById(id.heros));
        heroname = ((TextView) findViewById(id.heroname));
        winorlost = ((TextView) findViewById(id.winorlost));
        myhero = ((ImageView) findViewById(id.myhero));
        ((MatchFinderImpl_) finder).afterSetContentView_();
        ((PlayerAdapter_) playerAdapter).afterSetContentView_();
    }

    /**
     * The mAlreadyInflated_ hack is needed because of an Android bug
     * which leads to infinite calls of onFinishInflate()
     * when inflating a layout with a parent and using
     * the <merge /> tag.
     * 
     */
    @Override
    public void onFinishInflate() {
        if (!mAlreadyInflated_) {
            mAlreadyInflated_ = true;
            inflate(getContext(), layout.expandable_list_item, this);
            afterSetContentView_();
        }
        super.onFinishInflate();
    }

    public static NewMatchItem build(Context context) {
        NewMatchItem_ instance = new NewMatchItem_(context);
        instance.onFinishInflate();
        return instance;
    }

    @Override
    public void updatematchdetail(final Match match2) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    NewMatchItem_.super.updatematchdetail(match2);
                } catch (RuntimeException e) {
                    Log.e("NewMatchItem_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void getMatchDetail(final Match match) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    NewMatchItem_.super.getMatchDetail(match);
                } catch (RuntimeException e) {
                    Log.e("NewMatchItem_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

}
